name: Release to PyPI

on:
  push:
    branches: [main]
    paths: ['pyproject.toml']
  workflow_dispatch:

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if version changed
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Manual release triggered"
          else
            # Check if version changed in the last commit
            PREV_VERSION=$(git show HEAD~1:pyproject.toml | grep '^version = ' | sed 's/version = "\(.*\)"/\1/' || echo "")
            CURR_VERSION="${{ steps.version.outputs.version }}"
            
            if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Version changed: $PREV_VERSION ‚Üí $CURR_VERSION"
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "Version unchanged: $CURR_VERSION"
            fi
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root


      - name: Verify tests pass
        run: |
          # Run linting
          poetry run ruff check . || echo "‚ö†Ô∏è Linting issues found"
          
          # Run type checking
          poetry run mypy langchain_opperai/ || echo "‚ö†Ô∏è Type checking issues found"
          
          # Run tests
          poetry run pytest tests/unit_tests/ || echo "‚ö†Ô∏è Unit test issues found"

      - name: Build package
        run: |
          # Clean any previous builds
          rm -rf dist/
          
          # Build with Poetry
          poetry build
          
          # Verify the build
          ls -la dist/
          
          # Check package metadata
          poetry show --tree

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          TAG_NAME="v$VERSION"
          
          # Create the tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          
          # Generate release notes
          RELEASE_NOTES="$(cat <<EOF
          ## üöÄ LangChain OpperAI Integration v$VERSION
          
          This release contains the latest updates to the LangChain OpperAI integration package.
          
          ### üì¶ Installation
          \`\`\`bash
          pip install langchain-opperai==$VERSION
          # or
          poetry add langchain-opperai==$VERSION
          \`\`\`
          
          ### üîó Links
          - [PyPI Package](https://pypi.org/project/langchain-opperai/$VERSION/)
          - [LangChain Documentation](https://python.langchain.com/docs/integrations/chat/opperai/)
          - [OpperAI Documentation](https://docs.opper.ai)
          
          ### ü§ñ LangChain Integration
          This package provides OpperAI integration for LangChain, enabling seamless use of OpperAI's models within LangChain applications.
          
          ---
          
          **Full Changelog**: https://github.com/opper-ai/integration-langchain/compare/v$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "0.0.0")...v$VERSION
          EOF
          )"
          
          # Create the release
          gh release create "$TAG_NAME" \
            --title "üöÄ LangChain OpperAI Integration v$VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest \
            dist/*

      - name: Post-release summary
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          echo "üéâ Successfully released LangChain OpperAI Integration v$VERSION"
          echo "üì¶ PyPI: https://pypi.org/project/langchain-opperai/$VERSION/"
          echo "üè∑Ô∏è GitHub: https://github.com/opper-ai/integration-langchain/releases/tag/v$VERSION"
          
          # Post to PR if this was triggered by a merge
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "‚úÖ Automatic release completed from main branch push"
          else
            echo "‚úÖ Manual release completed"
          fi